module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successful,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var parseFunctions = {
        "main": parse_main
      };
      
      var options = arguments.length > 1 ? arguments[1] : {},
          startRule;
      
      if (options.startRule !== undefined) {
        startRule = options.startRule;
        
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Can't start parsing from rule " + quote(startRule) + ".");
        }
      } else {
        startRule = "main";
      }
      
      var pos = 0;
      var reportedPos = 0;
      var cachedReportedPos = 0;
      var cachedReportedPosDetails = { line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function computeReportedPosDetails() {
        function advanceCachedReportedPos() {
          var ch;
          
          for (; cachedReportedPos < reportedPos; cachedReportedPos++) {
            ch = input.charAt(cachedReportedPos);
            if (ch === "\n") {
              if (!cachedReportedPosDetails.seenCR) { cachedReportedPosDetails.line++; }
              cachedReportedPosDetails.column = 1;
              cachedReportedPosDetails.seenCR = false;
            } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
              cachedReportedPosDetails.line++;
              cachedReportedPosDetails.column = 1;
              cachedReportedPosDetails.seenCR = true;
            } else {
              cachedReportedPosDetails.column++;
              cachedReportedPosDetails.seenCR = false;
            }
          }
        }
        
        if (cachedReportedPos !== reportedPos) {
          if (cachedReportedPos > reportedPos) {
            cachedReportedPos = 0;
            cachedReportedPosDetails = { line: 1, column: 1, seenCR: false };
          }
          advanceCachedReportedPos();
        }
        
        return cachedReportedPosDetails;
      }
      
      function text() {
        return input.substring(reportedPos, pos);
      }
      
      function offset() {
        return reportedPos;
      }
      
      function line() {
        return computeReportedPosDetails().line;
      }
      
      function column() {
        return computeReportedPosDetails().column;
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_main() {
        var r0;
        
        r0 = parse_Program();
        return r0;
      }
      
      function parse_Program() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        if (input.substr(pos, 5) === "begin") {
          r2 = "begin";
          pos += 5;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"begin\"");
          }
        }
        if (r2 !== null) {
          r4 = parse_Ws();
          if (r4 !== null) {
            r3 = [];
            while (r4 !== null) {
              r3.push(r4);
              r4 = parse_Ws();
            }
          } else {
            r3 = null;
          }
          if (r3 !== null) {
            r4 = [];
            r6 = pos;
            r7 = parse_Function();
            if (r7 !== null) {
              r9 = parse_Ws();
              if (r9 !== null) {
                r8 = [];
                while (r9 !== null) {
                  r8.push(r9);
                  r9 = parse_Ws();
                }
              } else {
                r8 = null;
              }
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
            while (r5 !== null) {
              r4.push(r5);
              r6 = pos;
              r7 = parse_Function();
              if (r7 !== null) {
                r9 = parse_Ws();
                if (r9 !== null) {
                  r8 = [];
                  while (r9 !== null) {
                    r8.push(r9);
                    r9 = parse_Ws();
                  }
                } else {
                  r8 = null;
                }
                if (r8 !== null) {
                  r5 = [r7, r8];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            }
            if (r4 !== null) {
              r5 = parse_Statement();
              if (r5 !== null) {
                r7 = parse_Ws();
                if (r7 !== null) {
                  r6 = [];
                  while (r7 !== null) {
                    r6.push(r7);
                    r7 = parse_Ws();
                  }
                } else {
                  r6 = null;
                }
                if (r6 !== null) {
                  if (input.substr(pos, 3) === "end") {
                    r7 = "end";
                    pos += 3;
                  } else {
                    r7 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"end\"");
                    }
                  }
                  if (r7 !== null) {
                    r0 = [r2, r3, r4, r5, r6, r7];
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_Function() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
        
        r1 = pos;
        r2 = parse_Type();
        if (r2 !== null) {
          r4 = parse_Ws();
          if (r4 !== null) {
            r3 = [];
            while (r4 !== null) {
              r3.push(r4);
              r4 = parse_Ws();
            }
          } else {
            r3 = null;
          }
          if (r3 !== null) {
            r4 = parse_Ident();
            if (r4 !== null) {
              r6 = parse_Ws();
              if (r6 !== null) {
                r5 = [];
                while (r6 !== null) {
                  r5.push(r6);
                  r6 = parse_Ws();
                }
              } else {
                r5 = null;
              }
              if (r5 !== null) {
                if (input.charCodeAt(pos) === 40) {
                  r6 = "(";
                  pos++;
                } else {
                  r6 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (r6 !== null) {
                  r7 = parse_ParamList();
                  r7 = r7 !== null ? r7 : "";
                  if (r7 !== null) {
                    if (input.charCodeAt(pos) === 41) {
                      r8 = ")";
                      pos++;
                    } else {
                      r8 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (r8 !== null) {
                      r10 = parse_Ws();
                      if (r10 !== null) {
                        r9 = [];
                        while (r10 !== null) {
                          r9.push(r10);
                          r10 = parse_Ws();
                        }
                      } else {
                        r9 = null;
                      }
                      if (r9 !== null) {
                        if (input.substr(pos, 2) === "is") {
                          r10 = "is";
                          pos += 2;
                        } else {
                          r10 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"is\"");
                          }
                        }
                        if (r10 !== null) {
                          r12 = parse_Ws();
                          if (r12 !== null) {
                            r11 = [];
                            while (r12 !== null) {
                              r11.push(r12);
                              r12 = parse_Ws();
                            }
                          } else {
                            r11 = null;
                          }
                          if (r11 !== null) {
                            r12 = parse_Statement();
                            if (r12 !== null) {
                              r14 = parse_Ws();
                              if (r14 !== null) {
                                r13 = [];
                                while (r14 !== null) {
                                  r13.push(r14);
                                  r14 = parse_Ws();
                                }
                              } else {
                                r13 = null;
                              }
                              if (r13 !== null) {
                                if (input.substr(pos, 3) === "end") {
                                  r14 = "end";
                                  pos += 3;
                                } else {
                                  r14 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"end\"");
                                  }
                                }
                                if (r14 !== null) {
                                  r0 = [r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14];
                                } else {
                                  r0 = null;
                                  pos = r1;
                                }
                              } else {
                                r0 = null;
                                pos = r1;
                              }
                            } else {
                              r0 = null;
                              pos = r1;
                            }
                          } else {
                            r0 = null;
                            pos = r1;
                          }
                        } else {
                          r0 = null;
                          pos = r1;
                        }
                      } else {
                        r0 = null;
                        pos = r1;
                      }
                    } else {
                      r0 = null;
                      pos = r1;
                    }
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ParamList() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = parse_Param();
        if (r2 !== null) {
          r3 = [];
          r5 = pos;
          if (input.charCodeAt(pos) === 44) {
            r6 = ",";
            pos++;
          } else {
            r6 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (r6 !== null) {
            r7 = parse_Param();
            if (r7 !== null) {
              r4 = [r6, r7];
            } else {
              r4 = null;
              pos = r5;
            }
          } else {
            r4 = null;
            pos = r5;
          }
          while (r4 !== null) {
            r3.push(r4);
            r5 = pos;
            if (input.charCodeAt(pos) === 44) {
              r6 = ",";
              pos++;
            } else {
              r6 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r6 !== null) {
              r7 = parse_Param();
              if (r7 !== null) {
                r4 = [r6, r7];
              } else {
                r4 = null;
                pos = r5;
              }
            } else {
              r4 = null;
              pos = r5;
            }
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_Param() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = parse_Type();
        if (r2 !== null) {
          r4 = parse_Ws();
          if (r4 !== null) {
            r3 = [];
            while (r4 !== null) {
              r3.push(r4);
              r4 = parse_Ws();
            }
          } else {
            r3 = null;
          }
          if (r3 !== null) {
            r4 = parse_Ident();
            if (r4 !== null) {
              r0 = [r2, r3, r4];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_Statement() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = parse_StatementType();
        if (r2 !== null) {
          r4 = parse_Ws();
          if (r4 !== null) {
            r3 = [];
            while (r4 !== null) {
              r3.push(r4);
              r4 = parse_Ws();
            }
          } else {
            r3 = null;
          }
          if (r3 !== null) {
            r4 = parse_StatementTail();
            r4 = r4 !== null ? r4 : "";
            if (r4 !== null) {
              r0 = [r2, r3, r4];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_StatementType() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
        
        if (input.substr(pos, 4) === "skip") {
          r0 = "skip";
          pos += 4;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"skip\"");
          }
        }
        if (r0 === null) {
          r1 = pos;
          r2 = parse_ArrayType();
          if (r2 !== null) {
            r4 = parse_Ws();
            if (r4 !== null) {
              r3 = [];
              while (r4 !== null) {
                r3.push(r4);
                r4 = parse_Ws();
              }
            } else {
              r3 = null;
            }
            if (r3 !== null) {
              r4 = parse_Ident();
              if (r4 !== null) {
                r6 = parse_Ws();
                if (r6 !== null) {
                  r5 = [];
                  while (r6 !== null) {
                    r5.push(r6);
                    r6 = parse_Ws();
                  }
                } else {
                  r5 = null;
                }
                if (r5 !== null) {
                  if (input.charCodeAt(pos) === 61) {
                    r6 = "=";
                    pos++;
                  } else {
                    r6 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"=\"");
                    }
                  }
                  if (r6 !== null) {
                    r8 = parse_Ws();
                    if (r8 !== null) {
                      r7 = [];
                      while (r8 !== null) {
                        r7.push(r8);
                        r8 = parse_Ws();
                      }
                    } else {
                      r7 = null;
                    }
                    if (r7 !== null) {
                      r8 = parse_ArrayLiteral();
                      if (r8 !== null) {
                        r10 = parse_Ws();
                        if (r10 !== null) {
                          r9 = [];
                          while (r10 !== null) {
                            r9.push(r10);
                            r10 = parse_Ws();
                          }
                        } else {
                          r9 = null;
                        }
                        if (r9 !== null) {
                          r0 = [r2, r3, r4, r5, r6, r7, r8, r9];
                        } else {
                          r0 = null;
                          pos = r1;
                        }
                      } else {
                        r0 = null;
                        pos = r1;
                      }
                    } else {
                      r0 = null;
                      pos = r1;
                    }
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r2 = parse_Param();
            if (r2 !== null) {
              r4 = parse_Ws();
              if (r4 !== null) {
                r3 = [];
                while (r4 !== null) {
                  r3.push(r4);
                  r4 = parse_Ws();
                }
              } else {
                r3 = null;
              }
              if (r3 !== null) {
                if (input.charCodeAt(pos) === 61) {
                  r4 = "=";
                  pos++;
                } else {
                  r4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                if (r4 !== null) {
                  r6 = parse_Ws();
                  if (r6 !== null) {
                    r5 = [];
                    while (r6 !== null) {
                      r5.push(r6);
                      r6 = parse_Ws();
                    }
                  } else {
                    r5 = null;
                  }
                  if (r5 !== null) {
                    r6 = parse_AssignRhs();
                    if (r6 !== null) {
                      r0 = [r2, r3, r4, r5, r6];
                    } else {
                      r0 = null;
                      pos = r1;
                    }
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
            if (r0 === null) {
              r1 = pos;
              r2 = parse_AssignLhs();
              if (r2 !== null) {
                r4 = parse_Ws();
                if (r4 !== null) {
                  r3 = [];
                  while (r4 !== null) {
                    r3.push(r4);
                    r4 = parse_Ws();
                  }
                } else {
                  r3 = null;
                }
                if (r3 !== null) {
                  if (input.charCodeAt(pos) === 61) {
                    r4 = "=";
                    pos++;
                  } else {
                    r4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"=\"");
                    }
                  }
                  if (r4 !== null) {
                    r6 = parse_Ws();
                    if (r6 !== null) {
                      r5 = [];
                      while (r6 !== null) {
                        r5.push(r6);
                        r6 = parse_Ws();
                      }
                    } else {
                      r5 = null;
                    }
                    if (r5 !== null) {
                      r6 = parse_AssignRhs();
                      if (r6 !== null) {
                        r0 = [r2, r3, r4, r5, r6];
                      } else {
                        r0 = null;
                        pos = r1;
                      }
                    } else {
                      r0 = null;
                      pos = r1;
                    }
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
              if (r0 === null) {
                r1 = pos;
                if (input.substr(pos, 4) === "read") {
                  r2 = "read";
                  pos += 4;
                } else {
                  r2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"read\"");
                  }
                }
                if (r2 !== null) {
                  r4 = parse_Ws();
                  if (r4 !== null) {
                    r3 = [];
                    while (r4 !== null) {
                      r3.push(r4);
                      r4 = parse_Ws();
                    }
                  } else {
                    r3 = null;
                  }
                  if (r3 !== null) {
                    r4 = parse_AssignLhs();
                    if (r4 !== null) {
                      r0 = [r2, r3, r4];
                    } else {
                      r0 = null;
                      pos = r1;
                    }
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                } else {
                  r0 = null;
                  pos = r1;
                }
                if (r0 === null) {
                  r1 = pos;
                  if (input.substr(pos, 4) === "free") {
                    r2 = "free";
                    pos += 4;
                  } else {
                    r2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"free\"");
                    }
                  }
                  if (r2 !== null) {
                    r4 = parse_Ws();
                    if (r4 !== null) {
                      r3 = [];
                      while (r4 !== null) {
                        r3.push(r4);
                        r4 = parse_Ws();
                      }
                    } else {
                      r3 = null;
                    }
                    if (r3 !== null) {
                      r4 = parse_Expr();
                      if (r4 !== null) {
                        r0 = [r2, r3, r4];
                      } else {
                        r0 = null;
                        pos = r1;
                      }
                    } else {
                      r0 = null;
                      pos = r1;
                    }
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                  if (r0 === null) {
                    r1 = pos;
                    if (input.substr(pos, 6) === "return") {
                      r2 = "return";
                      pos += 6;
                    } else {
                      r2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"return\"");
                      }
                    }
                    if (r2 !== null) {
                      r4 = parse_Ws();
                      if (r4 !== null) {
                        r3 = [];
                        while (r4 !== null) {
                          r3.push(r4);
                          r4 = parse_Ws();
                        }
                      } else {
                        r3 = null;
                      }
                      if (r3 !== null) {
                        r4 = parse_Expr();
                        if (r4 !== null) {
                          r0 = [r2, r3, r4];
                        } else {
                          r0 = null;
                          pos = r1;
                        }
                      } else {
                        r0 = null;
                        pos = r1;
                      }
                    } else {
                      r0 = null;
                      pos = r1;
                    }
                    if (r0 === null) {
                      r1 = pos;
                      if (input.substr(pos, 4) === "exit") {
                        r2 = "exit";
                        pos += 4;
                      } else {
                        r2 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"exit\"");
                        }
                      }
                      if (r2 !== null) {
                        r4 = parse_Ws();
                        if (r4 !== null) {
                          r3 = [];
                          while (r4 !== null) {
                            r3.push(r4);
                            r4 = parse_Ws();
                          }
                        } else {
                          r3 = null;
                        }
                        if (r3 !== null) {
                          r4 = parse_Expr();
                          if (r4 !== null) {
                            r0 = [r2, r3, r4];
                          } else {
                            r0 = null;
                            pos = r1;
                          }
                        } else {
                          r0 = null;
                          pos = r1;
                        }
                      } else {
                        r0 = null;
                        pos = r1;
                      }
                      if (r0 === null) {
                        r1 = pos;
                        if (input.substr(pos, 5) === "print") {
                          r2 = "print";
                          pos += 5;
                        } else {
                          r2 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"print\"");
                          }
                        }
                        if (r2 !== null) {
                          r4 = parse_Ws();
                          if (r4 !== null) {
                            r3 = [];
                            while (r4 !== null) {
                              r3.push(r4);
                              r4 = parse_Ws();
                            }
                          } else {
                            r3 = null;
                          }
                          if (r3 !== null) {
                            r4 = parse_Expr();
                            if (r4 !== null) {
                              r0 = [r2, r3, r4];
                            } else {
                              r0 = null;
                              pos = r1;
                            }
                          } else {
                            r0 = null;
                            pos = r1;
                          }
                        } else {
                          r0 = null;
                          pos = r1;
                        }
                        if (r0 === null) {
                          r1 = pos;
                          if (input.substr(pos, 7) === "println") {
                            r2 = "println";
                            pos += 7;
                          } else {
                            r2 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"println\"");
                            }
                          }
                          if (r2 !== null) {
                            r4 = parse_Ws();
                            if (r4 !== null) {
                              r3 = [];
                              while (r4 !== null) {
                                r3.push(r4);
                                r4 = parse_Ws();
                              }
                            } else {
                              r3 = null;
                            }
                            if (r3 !== null) {
                              r4 = parse_Expr();
                              if (r4 !== null) {
                                r0 = [r2, r3, r4];
                              } else {
                                r0 = null;
                                pos = r1;
                              }
                            } else {
                              r0 = null;
                              pos = r1;
                            }
                          } else {
                            r0 = null;
                            pos = r1;
                          }
                          if (r0 === null) {
                            r1 = pos;
                            if (input.substr(pos, 2) === "if") {
                              r2 = "if";
                              pos += 2;
                            } else {
                              r2 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"if\"");
                              }
                            }
                            if (r2 !== null) {
                              r4 = parse_Ws();
                              if (r4 !== null) {
                                r3 = [];
                                while (r4 !== null) {
                                  r3.push(r4);
                                  r4 = parse_Ws();
                                }
                              } else {
                                r3 = null;
                              }
                              if (r3 !== null) {
                                r4 = parse_Expr();
                                if (r4 !== null) {
                                  r6 = parse_Ws();
                                  if (r6 !== null) {
                                    r5 = [];
                                    while (r6 !== null) {
                                      r5.push(r6);
                                      r6 = parse_Ws();
                                    }
                                  } else {
                                    r5 = null;
                                  }
                                  if (r5 !== null) {
                                    if (input.substr(pos, 4) === "then") {
                                      r6 = "then";
                                      pos += 4;
                                    } else {
                                      r6 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"then\"");
                                      }
                                    }
                                    if (r6 !== null) {
                                      r8 = parse_Ws();
                                      if (r8 !== null) {
                                        r7 = [];
                                        while (r8 !== null) {
                                          r7.push(r8);
                                          r8 = parse_Ws();
                                        }
                                      } else {
                                        r7 = null;
                                      }
                                      if (r7 !== null) {
                                        r8 = parse_Statement();
                                        if (r8 !== null) {
                                          r10 = parse_Ws();
                                          if (r10 !== null) {
                                            r9 = [];
                                            while (r10 !== null) {
                                              r9.push(r10);
                                              r10 = parse_Ws();
                                            }
                                          } else {
                                            r9 = null;
                                          }
                                          if (r9 !== null) {
                                            if (input.substr(pos, 4) === "else") {
                                              r10 = "else";
                                              pos += 4;
                                            } else {
                                              r10 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"else\"");
                                              }
                                            }
                                            if (r10 !== null) {
                                              r12 = parse_Ws();
                                              if (r12 !== null) {
                                                r11 = [];
                                                while (r12 !== null) {
                                                  r11.push(r12);
                                                  r12 = parse_Ws();
                                                }
                                              } else {
                                                r11 = null;
                                              }
                                              if (r11 !== null) {
                                                r12 = parse_Statement();
                                                if (r12 !== null) {
                                                  r14 = parse_Ws();
                                                  if (r14 !== null) {
                                                    r13 = [];
                                                    while (r14 !== null) {
                                                      r13.push(r14);
                                                      r14 = parse_Ws();
                                                    }
                                                  } else {
                                                    r13 = null;
                                                  }
                                                  if (r13 !== null) {
                                                    if (input.substr(pos, 2) === "fi") {
                                                      r14 = "fi";
                                                      pos += 2;
                                                    } else {
                                                      r14 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"fi\"");
                                                      }
                                                    }
                                                    if (r14 !== null) {
                                                      r0 = [r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14];
                                                    } else {
                                                      r0 = null;
                                                      pos = r1;
                                                    }
                                                  } else {
                                                    r0 = null;
                                                    pos = r1;
                                                  }
                                                } else {
                                                  r0 = null;
                                                  pos = r1;
                                                }
                                              } else {
                                                r0 = null;
                                                pos = r1;
                                              }
                                            } else {
                                              r0 = null;
                                              pos = r1;
                                            }
                                          } else {
                                            r0 = null;
                                            pos = r1;
                                          }
                                        } else {
                                          r0 = null;
                                          pos = r1;
                                        }
                                      } else {
                                        r0 = null;
                                        pos = r1;
                                      }
                                    } else {
                                      r0 = null;
                                      pos = r1;
                                    }
                                  } else {
                                    r0 = null;
                                    pos = r1;
                                  }
                                } else {
                                  r0 = null;
                                  pos = r1;
                                }
                              } else {
                                r0 = null;
                                pos = r1;
                              }
                            } else {
                              r0 = null;
                              pos = r1;
                            }
                            if (r0 === null) {
                              r1 = pos;
                              if (input.substr(pos, 5) === "while") {
                                r2 = "while";
                                pos += 5;
                              } else {
                                r2 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"while\"");
                                }
                              }
                              if (r2 !== null) {
                                r4 = parse_Ws();
                                if (r4 !== null) {
                                  r3 = [];
                                  while (r4 !== null) {
                                    r3.push(r4);
                                    r4 = parse_Ws();
                                  }
                                } else {
                                  r3 = null;
                                }
                                if (r3 !== null) {
                                  r4 = parse_Expr();
                                  if (r4 !== null) {
                                    r6 = parse_Ws();
                                    if (r6 !== null) {
                                      r5 = [];
                                      while (r6 !== null) {
                                        r5.push(r6);
                                        r6 = parse_Ws();
                                      }
                                    } else {
                                      r5 = null;
                                    }
                                    if (r5 !== null) {
                                      if (input.substr(pos, 2) === "do") {
                                        r6 = "do";
                                        pos += 2;
                                      } else {
                                        r6 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"do\"");
                                        }
                                      }
                                      if (r6 !== null) {
                                        r8 = parse_Ws();
                                        if (r8 !== null) {
                                          r7 = [];
                                          while (r8 !== null) {
                                            r7.push(r8);
                                            r8 = parse_Ws();
                                          }
                                        } else {
                                          r7 = null;
                                        }
                                        if (r7 !== null) {
                                          r8 = parse_Statement();
                                          if (r8 !== null) {
                                            r10 = parse_Ws();
                                            if (r10 !== null) {
                                              r9 = [];
                                              while (r10 !== null) {
                                                r9.push(r10);
                                                r10 = parse_Ws();
                                              }
                                            } else {
                                              r9 = null;
                                            }
                                            if (r9 !== null) {
                                              if (input.substr(pos, 4) === "done") {
                                                r10 = "done";
                                                pos += 4;
                                              } else {
                                                r10 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"done\"");
                                                }
                                              }
                                              if (r10 !== null) {
                                                r0 = [r2, r3, r4, r5, r6, r7, r8, r9, r10];
                                              } else {
                                                r0 = null;
                                                pos = r1;
                                              }
                                            } else {
                                              r0 = null;
                                              pos = r1;
                                            }
                                          } else {
                                            r0 = null;
                                            pos = r1;
                                          }
                                        } else {
                                          r0 = null;
                                          pos = r1;
                                        }
                                      } else {
                                        r0 = null;
                                        pos = r1;
                                      }
                                    } else {
                                      r0 = null;
                                      pos = r1;
                                    }
                                  } else {
                                    r0 = null;
                                    pos = r1;
                                  }
                                } else {
                                  r0 = null;
                                  pos = r1;
                                }
                              } else {
                                r0 = null;
                                pos = r1;
                              }
                              if (r0 === null) {
                                r1 = pos;
                                if (input.substr(pos, 5) === "begin") {
                                  r2 = "begin";
                                  pos += 5;
                                } else {
                                  r2 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"begin\"");
                                  }
                                }
                                if (r2 !== null) {
                                  r4 = parse_Ws();
                                  if (r4 !== null) {
                                    r3 = [];
                                    while (r4 !== null) {
                                      r3.push(r4);
                                      r4 = parse_Ws();
                                    }
                                  } else {
                                    r3 = null;
                                  }
                                  if (r3 !== null) {
                                    r4 = parse_Statement();
                                    if (r4 !== null) {
                                      r6 = parse_Ws();
                                      if (r6 !== null) {
                                        r5 = [];
                                        while (r6 !== null) {
                                          r5.push(r6);
                                          r6 = parse_Ws();
                                        }
                                      } else {
                                        r5 = null;
                                      }
                                      if (r5 !== null) {
                                        if (input.substr(pos, 3) === "end") {
                                          r6 = "end";
                                          pos += 3;
                                        } else {
                                          r6 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"end\"");
                                          }
                                        }
                                        if (r6 !== null) {
                                          r0 = [r2, r3, r4, r5, r6];
                                        } else {
                                          r0 = null;
                                          pos = r1;
                                        }
                                      } else {
                                        r0 = null;
                                        pos = r1;
                                      }
                                    } else {
                                      r0 = null;
                                      pos = r1;
                                    }
                                  } else {
                                    r0 = null;
                                    pos = r1;
                                  }
                                } else {
                                  r0 = null;
                                  pos = r1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_StatementTail() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.charCodeAt(pos) === 59) {
          r2 = ";";
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\";\"");
          }
        }
        if (r2 !== null) {
          r4 = parse_Ws();
          if (r4 !== null) {
            r3 = [];
            while (r4 !== null) {
              r3.push(r4);
              r4 = parse_Ws();
            }
          } else {
            r3 = null;
          }
          if (r3 !== null) {
            r4 = parse_StatementTail();
            if (r4 !== null) {
              r0 = [r2, r3, r4];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_AssignLhs() {
        var r0;
        
        r0 = parse_Ident();
        if (r0 === null) {
          r0 = parse_ArrayElem();
          if (r0 === null) {
            r0 = parse_PairElem();
          }
        }
        return r0;
      }
      
      function parse_AssignRhs() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
        
        r0 = parse_Expr();
        if (r0 === null) {
          r0 = parse_ArrayLiteral();
          if (r0 === null) {
            r1 = pos;
            if (input.substr(pos, 7) === "newpair") {
              r2 = "newpair";
              pos += 7;
            } else {
              r2 = null;
              if (reportFailures === 0) {
                matchFailed("\"newpair\"");
              }
            }
            if (r2 !== null) {
              r3 = [];
              r4 = parse_Ws();
              while (r4 !== null) {
                r3.push(r4);
                r4 = parse_Ws();
              }
              if (r3 !== null) {
                if (input.charCodeAt(pos) === 40) {
                  r4 = "(";
                  pos++;
                } else {
                  r4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (r4 !== null) {
                  r5 = [];
                  r6 = parse_Ws();
                  while (r6 !== null) {
                    r5.push(r6);
                    r6 = parse_Ws();
                  }
                  if (r5 !== null) {
                    r6 = parse_Expr();
                    if (r6 !== null) {
                      r7 = [];
                      r8 = parse_Ws();
                      while (r8 !== null) {
                        r7.push(r8);
                        r8 = parse_Ws();
                      }
                      if (r7 !== null) {
                        if (input.charCodeAt(pos) === 44) {
                          r8 = ",";
                          pos++;
                        } else {
                          r8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\",\"");
                          }
                        }
                        if (r8 !== null) {
                          r9 = [];
                          r10 = parse_Ws();
                          while (r10 !== null) {
                            r9.push(r10);
                            r10 = parse_Ws();
                          }
                          if (r9 !== null) {
                            r10 = parse_Expr();
                            if (r10 !== null) {
                              r11 = [];
                              r12 = parse_Ws();
                              while (r12 !== null) {
                                r11.push(r12);
                                r12 = parse_Ws();
                              }
                              if (r11 !== null) {
                                if (input.charCodeAt(pos) === 41) {
                                  r12 = ")";
                                  pos++;
                                } else {
                                  r12 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                  }
                                }
                                if (r12 !== null) {
                                  r14 = parse_Ws();
                                  if (r14 !== null) {
                                    r13 = [];
                                    while (r14 !== null) {
                                      r13.push(r14);
                                      r14 = parse_Ws();
                                    }
                                  } else {
                                    r13 = null;
                                  }
                                  if (r13 !== null) {
                                    r0 = [r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13];
                                  } else {
                                    r0 = null;
                                    pos = r1;
                                  }
                                } else {
                                  r0 = null;
                                  pos = r1;
                                }
                              } else {
                                r0 = null;
                                pos = r1;
                              }
                            } else {
                              r0 = null;
                              pos = r1;
                            }
                          } else {
                            r0 = null;
                            pos = r1;
                          }
                        } else {
                          r0 = null;
                          pos = r1;
                        }
                      } else {
                        r0 = null;
                        pos = r1;
                      }
                    } else {
                      r0 = null;
                      pos = r1;
                    }
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
            if (r0 === null) {
              r0 = parse_PairElem();
              if (r0 === null) {
                r1 = pos;
                if (input.substr(pos, 4) === "call") {
                  r2 = "call";
                  pos += 4;
                } else {
                  r2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"call\"");
                  }
                }
                if (r2 !== null) {
                  r4 = parse_Ws();
                  if (r4 !== null) {
                    r3 = [];
                    while (r4 !== null) {
                      r3.push(r4);
                      r4 = parse_Ws();
                    }
                  } else {
                    r3 = null;
                  }
                  if (r3 !== null) {
                    r4 = parse_Ident();
                    if (r4 !== null) {
                      if (input.charCodeAt(pos) === 40) {
                        r5 = "(";
                        pos++;
                      } else {
                        r5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (r5 !== null) {
                        r6 = [];
                        r7 = parse_Ws();
                        while (r7 !== null) {
                          r6.push(r7);
                          r7 = parse_Ws();
                        }
                        if (r6 !== null) {
                          r7 = parse_ArgList();
                          r7 = r7 !== null ? r7 : "";
                          if (r7 !== null) {
                            r8 = [];
                            r9 = parse_Ws();
                            while (r9 !== null) {
                              r8.push(r9);
                              r9 = parse_Ws();
                            }
                            if (r8 !== null) {
                              if (input.charCodeAt(pos) === 41) {
                                r9 = ")";
                                pos++;
                              } else {
                                r9 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (r9 !== null) {
                                r0 = [r2, r3, r4, r5, r6, r7, r8, r9];
                              } else {
                                r0 = null;
                                pos = r1;
                              }
                            } else {
                              r0 = null;
                              pos = r1;
                            }
                          } else {
                            r0 = null;
                            pos = r1;
                          }
                        } else {
                          r0 = null;
                          pos = r1;
                        }
                      } else {
                        r0 = null;
                        pos = r1;
                      }
                    } else {
                      r0 = null;
                      pos = r1;
                    }
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                } else {
                  r0 = null;
                  pos = r1;
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_ArgList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = parse_Expr();
        if (r2 !== null) {
          r3 = [];
          r5 = pos;
          r6 = [];
          r7 = parse_Ws();
          while (r7 !== null) {
            r6.push(r7);
            r7 = parse_Ws();
          }
          if (r6 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r7 = ",";
              pos++;
            } else {
              r7 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r7 !== null) {
              r9 = parse_Ws();
              if (r9 !== null) {
                r8 = [];
                while (r9 !== null) {
                  r8.push(r9);
                  r9 = parse_Ws();
                }
              } else {
                r8 = null;
              }
              if (r8 !== null) {
                r9 = parse_Expr();
                if (r9 !== null) {
                  r4 = [r6, r7, r8, r9];
                } else {
                  r4 = null;
                  pos = r5;
                }
              } else {
                r4 = null;
                pos = r5;
              }
            } else {
              r4 = null;
              pos = r5;
            }
          } else {
            r4 = null;
            pos = r5;
          }
          while (r4 !== null) {
            r3.push(r4);
            r5 = pos;
            r6 = [];
            r7 = parse_Ws();
            while (r7 !== null) {
              r6.push(r7);
              r7 = parse_Ws();
            }
            if (r6 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r7 = ",";
                pos++;
              } else {
                r7 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r7 !== null) {
                r9 = parse_Ws();
                if (r9 !== null) {
                  r8 = [];
                  while (r9 !== null) {
                    r8.push(r9);
                    r9 = parse_Ws();
                  }
                } else {
                  r8 = null;
                }
                if (r8 !== null) {
                  r9 = parse_Expr();
                  if (r9 !== null) {
                    r4 = [r6, r7, r8, r9];
                  } else {
                    r4 = null;
                    pos = r5;
                  }
                } else {
                  r4 = null;
                  pos = r5;
                }
              } else {
                r4 = null;
                pos = r5;
              }
            } else {
              r4 = null;
              pos = r5;
            }
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_UnaryOp() {
        var r0;
        
        if (input.charCodeAt(pos) === 33) {
          r0 = "!";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"!\"");
          }
        }
        if (r0 === null) {
          if (input.charCodeAt(pos) === 45) {
            r0 = "-";
            pos++;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (r0 === null) {
            if (input.substr(pos, 3) === "len") {
              r0 = "len";
              pos += 3;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"len\"");
              }
            }
            if (r0 === null) {
              if (input.substr(pos, 3) === "ord") {
                r0 = "ord";
                pos += 3;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"ord\"");
                }
              }
              if (r0 === null) {
                if (input.substr(pos, 5) === "toInt") {
                  r0 = "toInt";
                  pos += 5;
                } else {
                  r0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"toInt\"");
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_BinOp() {
        var r0;
        
        if (input.charCodeAt(pos) === 42) {
          r0 = "*";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (r0 === null) {
          if (input.charCodeAt(pos) === 47) {
            r0 = "/";
            pos++;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (r0 === null) {
            if (input.charCodeAt(pos) === 37) {
              r0 = "%";
              pos++;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"%\"");
              }
            }
            if (r0 === null) {
              if (input.charCodeAt(pos) === 43) {
                r0 = "+";
                pos++;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"+\"");
                }
              }
              if (r0 === null) {
                if (input.charCodeAt(pos) === 45) {
                  r0 = "-";
                  pos++;
                } else {
                  r0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }
                if (r0 === null) {
                  if (input.charCodeAt(pos) === 62) {
                    r0 = ">";
                    pos++;
                  } else {
                    r0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\">\"");
                    }
                  }
                  if (r0 === null) {
                    if (input.substr(pos, 2) === ">=") {
                      r0 = ">=";
                      pos += 2;
                    } else {
                      r0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\">=\"");
                      }
                    }
                    if (r0 === null) {
                      if (input.charCodeAt(pos) === 60) {
                        r0 = "<";
                        pos++;
                      } else {
                        r0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"<\"");
                        }
                      }
                      if (r0 === null) {
                        if (input.substr(pos, 2) === "<=") {
                          r0 = "<=";
                          pos += 2;
                        } else {
                          r0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"<=\"");
                          }
                        }
                        if (r0 === null) {
                          if (input.substr(pos, 2) === "==") {
                            r0 = "==";
                            pos += 2;
                          } else {
                            r0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"==\"");
                            }
                          }
                          if (r0 === null) {
                            if (input.substr(pos, 2) === "!-") {
                              r0 = "!-";
                              pos += 2;
                            } else {
                              r0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"!-\"");
                              }
                            }
                            if (r0 === null) {
                              if (input.substr(pos, 2) === "&&") {
                                r0 = "&&";
                                pos += 2;
                              } else {
                                r0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"&&\"");
                                }
                              }
                              if (r0 === null) {
                                if (input.substr(pos, 2) === "||") {
                                  r0 = "||";
                                  pos += 2;
                                } else {
                                  r0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"||\"");
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_Type() {
        var r0;
        
        r0 = parse_ArrayType();
        if (r0 === null) {
          r0 = parse_BaseType();
          if (r0 === null) {
            r0 = parse_PairType();
          }
        }
        return r0;
      }
      
      function parse_BaseType() {
        var r0;
        
        if (input.substr(pos, 3) === "int") {
          r0 = "int";
          pos += 3;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"int\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 4) === "bool") {
            r0 = "bool";
            pos += 4;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"bool\"");
            }
          }
          if (r0 === null) {
            if (input.substr(pos, 4) === "char") {
              r0 = "char";
              pos += 4;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"char\"");
              }
            }
            if (r0 === null) {
              if (input.substr(pos, 6) === "string") {
                r0 = "string";
                pos += 6;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"string\"");
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_Expr() {
        var r0, r1, r2, r3;
        
        r1 = pos;
        r2 = parse_ExprType();
        if (r2 !== null) {
          r3 = parse_ExprTail();
          r3 = r3 !== null ? r3 : "";
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ExprType() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r0 = parse_IntLiteral();
        if (r0 === null) {
          r0 = parse_BoolLiteral();
          if (r0 === null) {
            r0 = parse_CharLiteral();
            if (r0 === null) {
              r0 = parse_StrLiteral();
              if (r0 === null) {
                r0 = parse_PairLiteral();
                if (r0 === null) {
                  r0 = parse_Ident();
                  if (r0 === null) {
                    r0 = parse_ArrayElem();
                    if (r0 === null) {
                      r1 = pos;
                      r2 = parse_UnaryOp();
                      if (r2 !== null) {
                        r4 = parse_Ws();
                        if (r4 !== null) {
                          r3 = [];
                          while (r4 !== null) {
                            r3.push(r4);
                            r4 = parse_Ws();
                          }
                        } else {
                          r3 = null;
                        }
                        if (r3 !== null) {
                          r4 = parse_Expr();
                          if (r4 !== null) {
                            r0 = [r2, r3, r4];
                          } else {
                            r0 = null;
                            pos = r1;
                          }
                        } else {
                          r0 = null;
                          pos = r1;
                        }
                      } else {
                        r0 = null;
                        pos = r1;
                      }
                      if (r0 === null) {
                        r1 = pos;
                        if (input.charCodeAt(pos) === 40) {
                          r2 = "(";
                          pos++;
                        } else {
                          r2 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"(\"");
                          }
                        }
                        if (r2 !== null) {
                          r3 = [];
                          r4 = parse_Ws();
                          while (r4 !== null) {
                            r3.push(r4);
                            r4 = parse_Ws();
                          }
                          if (r3 !== null) {
                            r4 = parse_Expr();
                            if (r4 !== null) {
                              r5 = [];
                              r6 = parse_Ws();
                              while (r6 !== null) {
                                r5.push(r6);
                                r6 = parse_Ws();
                              }
                              if (r5 !== null) {
                                if (input.charCodeAt(pos) === 41) {
                                  r6 = ")";
                                  pos++;
                                } else {
                                  r6 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                  }
                                }
                                if (r6 !== null) {
                                  r0 = [r2, r3, r4, r5, r6];
                                } else {
                                  r0 = null;
                                  pos = r1;
                                }
                              } else {
                                r0 = null;
                                pos = r1;
                              }
                            } else {
                              r0 = null;
                              pos = r1;
                            }
                          } else {
                            r0 = null;
                            pos = r1;
                          }
                        } else {
                          r0 = null;
                          pos = r1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_ExprTail() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r3 = parse_Ws();
        if (r3 !== null) {
          r2 = [];
          while (r3 !== null) {
            r2.push(r3);
            r3 = parse_Ws();
          }
        } else {
          r2 = null;
        }
        if (r2 !== null) {
          r3 = parse_BinOp();
          if (r3 !== null) {
            r5 = parse_Ws();
            if (r5 !== null) {
              r4 = [];
              while (r5 !== null) {
                r4.push(r5);
                r5 = parse_Ws();
              }
            } else {
              r4 = null;
            }
            if (r4 !== null) {
              r5 = parse_Expr();
              if (r5 !== null) {
                r0 = [r2, r3, r4, r5];
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ArrayType() {
        var r0, r1, r2, r3;
        
        r1 = pos;
        r2 = parse_BaseType();
        if (r2 !== null) {
          if (input.substr(pos, 2) === "[]") {
            r3 = "[]";
            pos += 2;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"[]\"");
            }
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ArrayElem() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = parse_Ident();
        if (r2 !== null) {
          if (input.charCodeAt(pos) === 91) {
            r3 = "[";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (r3 !== null) {
            r4 = [];
            r5 = parse_Ws();
            while (r5 !== null) {
              r4.push(r5);
              r5 = parse_Ws();
            }
            if (r4 !== null) {
              r5 = parse_Expr();
              if (r5 !== null) {
                r6 = [];
                r7 = parse_Ws();
                while (r7 !== null) {
                  r6.push(r7);
                  r7 = parse_Ws();
                }
                if (r6 !== null) {
                  if (input.charCodeAt(pos) === 93) {
                    r7 = "]";
                    pos++;
                  } else {
                    r7 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (r7 !== null) {
                    r0 = [r2, r3, r4, r5, r6, r7];
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_PairType() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        if (input.substr(pos, 4) === "pair") {
          r2 = "pair";
          pos += 4;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"pair\"");
          }
        }
        if (r2 !== null) {
          if (input.charCodeAt(pos) === 40) {
            r3 = "(";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (r3 !== null) {
            r4 = [];
            r5 = parse_Ws();
            while (r5 !== null) {
              r4.push(r5);
              r5 = parse_Ws();
            }
            if (r4 !== null) {
              r5 = parse_PairElemType();
              if (r5 !== null) {
                r6 = [];
                r7 = parse_Ws();
                while (r7 !== null) {
                  r6.push(r7);
                  r7 = parse_Ws();
                }
                if (r6 !== null) {
                  if (input.charCodeAt(pos) === 44) {
                    r7 = ",";
                    pos++;
                  } else {
                    r7 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (r7 !== null) {
                    r8 = [];
                    r9 = parse_Ws();
                    while (r9 !== null) {
                      r8.push(r9);
                      r9 = parse_Ws();
                    }
                    if (r8 !== null) {
                      r9 = parse_PairElemType();
                      if (r9 !== null) {
                        r10 = [];
                        r11 = parse_Ws();
                        while (r11 !== null) {
                          r10.push(r11);
                          r11 = parse_Ws();
                        }
                        if (r10 !== null) {
                          if (input.charCodeAt(pos) === 41) {
                            r11 = ")";
                            pos++;
                          } else {
                            r11 = null;
                            if (reportFailures === 0) {
                              matchFailed("\")\"");
                            }
                          }
                          if (r11 !== null) {
                            r0 = [r2, r3, r4, r5, r6, r7, r8, r9, r10, r11];
                          } else {
                            r0 = null;
                            pos = r1;
                          }
                        } else {
                          r0 = null;
                          pos = r1;
                        }
                      } else {
                        r0 = null;
                        pos = r1;
                      }
                    } else {
                      r0 = null;
                      pos = r1;
                    }
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_PairElem() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = parse_PairAccessor();
        if (r2 !== null) {
          r4 = parse_Ws();
          if (r4 !== null) {
            r3 = [];
            while (r4 !== null) {
              r3.push(r4);
              r4 = parse_Ws();
            }
          } else {
            r3 = null;
          }
          if (r3 !== null) {
            r4 = parse_Expr();
            if (r4 !== null) {
              r0 = [r2, r3, r4];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_PairAccessor() {
        var r0;
        
        if (input.substr(pos, 3) === "fst") {
          r0 = "fst";
          pos += 3;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"fst\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 3) === "snd") {
            r0 = "snd";
            pos += 3;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"snd\"");
            }
          }
        }
        return r0;
      }
      
      function parse_PairElemType() {
        var r0;
        
        r0 = parse_BaseType();
        if (r0 === null) {
          r0 = parse_ArrayType();
          if (r0 === null) {
            if (input.substr(pos, 4) === "pair") {
              r0 = "pair";
              pos += 4;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"pair\"");
              }
            }
          }
        }
        return r0;
      }
      
      function parse_Ident() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (/^[_a-zA-Z]/.test(input.charAt(pos))) {
          r2 = input.charAt(pos);
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("[_a-zA-Z]");
          }
        }
        if (r2 !== null) {
          r3 = [];
          if (/^[_a-zA-Z0-9]/.test(input.charAt(pos))) {
            r4 = input.charAt(pos);
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("[_a-zA-Z0-9]");
            }
          }
          while (r4 !== null) {
            r3.push(r4);
            if (/^[_a-zA-Z0-9]/.test(input.charAt(pos))) {
              r4 = input.charAt(pos);
              pos++;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("[_a-zA-Z0-9]");
              }
            }
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          reportFailures++;
          r0 = parse_ReservedWord();
          reportFailures--;
          if (r0 === null) {
            r0 = "";
          } else {
            r0 = null;
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_ReservedWord() {
        var r0;
        
        if (input.substr(pos, 5) === "begin") {
          r0 = "begin";
          pos += 5;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"begin\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 3) === "end") {
            r0 = "end";
            pos += 3;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"end\"");
            }
          }
          if (r0 === null) {
            if (input.substr(pos, 2) === "is") {
              r0 = "is";
              pos += 2;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"is\"");
              }
            }
            if (r0 === null) {
              if (input.substr(pos, 4) === "skip") {
                r0 = "skip";
                pos += 4;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"skip\"");
                }
              }
              if (r0 === null) {
                if (input.substr(pos, 4) === "read") {
                  r0 = "read";
                  pos += 4;
                } else {
                  r0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"read\"");
                  }
                }
                if (r0 === null) {
                  if (input.substr(pos, 4) === "free") {
                    r0 = "free";
                    pos += 4;
                  } else {
                    r0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"free\"");
                    }
                  }
                  if (r0 === null) {
                    if (input.substr(pos, 6) === "return") {
                      r0 = "return";
                      pos += 6;
                    } else {
                      r0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"return\"");
                      }
                    }
                    if (r0 === null) {
                      if (input.substr(pos, 4) === "exit") {
                        r0 = "exit";
                        pos += 4;
                      } else {
                        r0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"exit\"");
                        }
                      }
                      if (r0 === null) {
                        if (input.substr(pos, 5) === "print") {
                          r0 = "print";
                          pos += 5;
                        } else {
                          r0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"print\"");
                          }
                        }
                        if (r0 === null) {
                          if (input.substr(pos, 7) === "println") {
                            r0 = "println";
                            pos += 7;
                          } else {
                            r0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"println\"");
                            }
                          }
                          if (r0 === null) {
                            if (input.substr(pos, 2) === "if") {
                              r0 = "if";
                              pos += 2;
                            } else {
                              r0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"if\"");
                              }
                            }
                            if (r0 === null) {
                              if (input.substr(pos, 4) === "then") {
                                r0 = "then";
                                pos += 4;
                              } else {
                                r0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"then\"");
                                }
                              }
                              if (r0 === null) {
                                if (input.substr(pos, 4) === "else") {
                                  r0 = "else";
                                  pos += 4;
                                } else {
                                  r0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"else\"");
                                  }
                                }
                                if (r0 === null) {
                                  if (input.substr(pos, 2) === "fi") {
                                    r0 = "fi";
                                    pos += 2;
                                  } else {
                                    r0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"fi\"");
                                    }
                                  }
                                  if (r0 === null) {
                                    if (input.substr(pos, 5) === "while") {
                                      r0 = "while";
                                      pos += 5;
                                    } else {
                                      r0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"while\"");
                                      }
                                    }
                                    if (r0 === null) {
                                      if (input.substr(pos, 2) === "do") {
                                        r0 = "do";
                                        pos += 2;
                                      } else {
                                        r0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"do\"");
                                        }
                                      }
                                      if (r0 === null) {
                                        if (input.substr(pos, 4) === "done") {
                                          r0 = "done";
                                          pos += 4;
                                        } else {
                                          r0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"done\"");
                                          }
                                        }
                                        if (r0 === null) {
                                          if (input.substr(pos, 7) === "newpair") {
                                            r0 = "newpair";
                                            pos += 7;
                                          } else {
                                            r0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"newpair\"");
                                            }
                                          }
                                          if (r0 === null) {
                                            if (input.substr(pos, 4) === "call") {
                                              r0 = "call";
                                              pos += 4;
                                            } else {
                                              r0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"call\"");
                                              }
                                            }
                                            if (r0 === null) {
                                              if (input.substr(pos, 3) === "len") {
                                                r0 = "len";
                                                pos += 3;
                                              } else {
                                                r0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"len\"");
                                                }
                                              }
                                              if (r0 === null) {
                                                if (input.substr(pos, 3) === "ord") {
                                                  r0 = "ord";
                                                  pos += 3;
                                                } else {
                                                  r0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"ord\"");
                                                  }
                                                }
                                                if (r0 === null) {
                                                  if (input.substr(pos, 5) === "toInt") {
                                                    r0 = "toInt";
                                                    pos += 5;
                                                  } else {
                                                    r0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"toInt\"");
                                                    }
                                                  }
                                                  if (r0 === null) {
                                                    if (input.substr(pos, 3) === "int") {
                                                      r0 = "int";
                                                      pos += 3;
                                                    } else {
                                                      r0 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"int\"");
                                                      }
                                                    }
                                                    if (r0 === null) {
                                                      if (input.substr(pos, 4) === "bool") {
                                                        r0 = "bool";
                                                        pos += 4;
                                                      } else {
                                                        r0 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"bool\"");
                                                        }
                                                      }
                                                      if (r0 === null) {
                                                        if (input.substr(pos, 4) === "char") {
                                                          r0 = "char";
                                                          pos += 4;
                                                        } else {
                                                          r0 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"char\"");
                                                          }
                                                        }
                                                        if (r0 === null) {
                                                          if (input.substr(pos, 6) === "string") {
                                                            r0 = "string";
                                                            pos += 6;
                                                          } else {
                                                            r0 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed("\"string\"");
                                                            }
                                                          }
                                                          if (r0 === null) {
                                                            if (input.substr(pos, 4) === "pair") {
                                                              r0 = "pair";
                                                              pos += 4;
                                                            } else {
                                                              r0 = null;
                                                              if (reportFailures === 0) {
                                                                matchFailed("\"pair\"");
                                                              }
                                                            }
                                                            if (r0 === null) {
                                                              if (input.substr(pos, 3) === "fst") {
                                                                r0 = "fst";
                                                                pos += 3;
                                                              } else {
                                                                r0 = null;
                                                                if (reportFailures === 0) {
                                                                  matchFailed("\"fst\"");
                                                                }
                                                              }
                                                              if (r0 === null) {
                                                                if (input.substr(pos, 3) === "snd") {
                                                                  r0 = "snd";
                                                                  pos += 3;
                                                                } else {
                                                                  r0 = null;
                                                                  if (reportFailures === 0) {
                                                                    matchFailed("\"snd\"");
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_IntLiteral() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = parse_IntSign();
        r2 = r2 !== null ? r2 : "";
        if (r2 !== null) {
          r4 = parse_Digit();
          if (r4 !== null) {
            r3 = [];
            while (r4 !== null) {
              r3.push(r4);
              r4 = parse_Digit();
            }
          } else {
            r3 = null;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_IntSign() {
        var r0;
        
        if (input.charCodeAt(pos) === 43) {
          r0 = "+";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (r0 === null) {
          if (input.charCodeAt(pos) === 45) {
            r0 = "-";
            pos++;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
        }
        return r0;
      }
      
      function parse_BoolLiteral() {
        var r0;
        
        if (input.substr(pos, 4) === "true") {
          r0 = "true";
          pos += 4;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 5) === "false") {
            r0 = "false";
            pos += 5;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"false\"");
            }
          }
        }
        return r0;
      }
      
      function parse_CharLiteral() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.charCodeAt(pos) === 39) {
          r2 = "'";
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (r2 !== null) {
          r3 = parse_Character();
          if (r3 !== null) {
            if (input.charCodeAt(pos) === 39) {
              r4 = "'";
              pos++;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (r4 !== null) {
              r0 = [r2, r3, r4];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_StrLiteral() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.charCodeAt(pos) === 34) {
          r2 = "\"";
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (r2 !== null) {
          r3 = [];
          r4 = parse_Character();
          while (r4 !== null) {
            r3.push(r4);
            r4 = parse_Character();
          }
          if (r3 !== null) {
            if (input.charCodeAt(pos) === 34) {
              r4 = "\"";
              pos++;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (r4 !== null) {
              r0 = [r2, r3, r4];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_Character() {
        var r0, r1, r2, r3;
        
        if (/^[^(\\'")]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[^(\\\\'\")]");
          }
        }
        if (r0 === null) {
          r1 = pos;
          if (input.charCodeAt(pos) === 92) {
            r2 = "\\";
            pos++;
          } else {
            r2 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (r2 !== null) {
            r3 = parse_EscapedChar();
            if (r3 !== null) {
              r0 = [r2, r3];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_ArrayLiteral() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
        
        r1 = pos;
        if (input.charCodeAt(pos) === 91) {
          r2 = "[";
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (r2 !== null) {
          r3 = [];
          r4 = parse_Ws();
          while (r4 !== null) {
            r3.push(r4);
            r4 = parse_Ws();
          }
          if (r3 !== null) {
            r4 = [];
            r6 = pos;
            r7 = parse_Expr();
            if (r7 !== null) {
              r8 = [];
              r10 = pos;
              r11 = [];
              r12 = parse_Ws();
              while (r12 !== null) {
                r11.push(r12);
                r12 = parse_Ws();
              }
              if (r11 !== null) {
                if (input.charCodeAt(pos) === 44) {
                  r12 = ",";
                  pos++;
                } else {
                  r12 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (r12 !== null) {
                  r13 = [];
                  r14 = parse_Ws();
                  while (r14 !== null) {
                    r13.push(r14);
                    r14 = parse_Ws();
                  }
                  if (r13 !== null) {
                    r14 = parse_Expr();
                    if (r14 !== null) {
                      r9 = [r11, r12, r13, r14];
                    } else {
                      r9 = null;
                      pos = r10;
                    }
                  } else {
                    r9 = null;
                    pos = r10;
                  }
                } else {
                  r9 = null;
                  pos = r10;
                }
              } else {
                r9 = null;
                pos = r10;
              }
              while (r9 !== null) {
                r8.push(r9);
                r10 = pos;
                r11 = [];
                r12 = parse_Ws();
                while (r12 !== null) {
                  r11.push(r12);
                  r12 = parse_Ws();
                }
                if (r11 !== null) {
                  if (input.charCodeAt(pos) === 44) {
                    r12 = ",";
                    pos++;
                  } else {
                    r12 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (r12 !== null) {
                    r13 = [];
                    r14 = parse_Ws();
                    while (r14 !== null) {
                      r13.push(r14);
                      r14 = parse_Ws();
                    }
                    if (r13 !== null) {
                      r14 = parse_Expr();
                      if (r14 !== null) {
                        r9 = [r11, r12, r13, r14];
                      } else {
                        r9 = null;
                        pos = r10;
                      }
                    } else {
                      r9 = null;
                      pos = r10;
                    }
                  } else {
                    r9 = null;
                    pos = r10;
                  }
                } else {
                  r9 = null;
                  pos = r10;
                }
              }
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
            while (r5 !== null) {
              r4.push(r5);
              r6 = pos;
              r7 = parse_Expr();
              if (r7 !== null) {
                r8 = [];
                r10 = pos;
                r11 = [];
                r12 = parse_Ws();
                while (r12 !== null) {
                  r11.push(r12);
                  r12 = parse_Ws();
                }
                if (r11 !== null) {
                  if (input.charCodeAt(pos) === 44) {
                    r12 = ",";
                    pos++;
                  } else {
                    r12 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (r12 !== null) {
                    r13 = [];
                    r14 = parse_Ws();
                    while (r14 !== null) {
                      r13.push(r14);
                      r14 = parse_Ws();
                    }
                    if (r13 !== null) {
                      r14 = parse_Expr();
                      if (r14 !== null) {
                        r9 = [r11, r12, r13, r14];
                      } else {
                        r9 = null;
                        pos = r10;
                      }
                    } else {
                      r9 = null;
                      pos = r10;
                    }
                  } else {
                    r9 = null;
                    pos = r10;
                  }
                } else {
                  r9 = null;
                  pos = r10;
                }
                while (r9 !== null) {
                  r8.push(r9);
                  r10 = pos;
                  r11 = [];
                  r12 = parse_Ws();
                  while (r12 !== null) {
                    r11.push(r12);
                    r12 = parse_Ws();
                  }
                  if (r11 !== null) {
                    if (input.charCodeAt(pos) === 44) {
                      r12 = ",";
                      pos++;
                    } else {
                      r12 = null;
                      if (reportFailures === 0) {
                        matchFailed("\",\"");
                      }
                    }
                    if (r12 !== null) {
                      r13 = [];
                      r14 = parse_Ws();
                      while (r14 !== null) {
                        r13.push(r14);
                        r14 = parse_Ws();
                      }
                      if (r13 !== null) {
                        r14 = parse_Expr();
                        if (r14 !== null) {
                          r9 = [r11, r12, r13, r14];
                        } else {
                          r9 = null;
                          pos = r10;
                        }
                      } else {
                        r9 = null;
                        pos = r10;
                      }
                    } else {
                      r9 = null;
                      pos = r10;
                    }
                  } else {
                    r9 = null;
                    pos = r10;
                  }
                }
                if (r8 !== null) {
                  r5 = [r7, r8];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            }
            if (r4 !== null) {
              r5 = [];
              r6 = parse_Ws();
              while (r6 !== null) {
                r5.push(r6);
                r6 = parse_Ws();
              }
              if (r5 !== null) {
                if (input.charCodeAt(pos) === 93) {
                  r6 = "]";
                  pos++;
                } else {
                  r6 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"]\"");
                  }
                }
                if (r6 !== null) {
                  r0 = [r2, r3, r4, r5, r6];
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_PairLiteral() {
        var r0;
        
        if (input.substr(pos, 4) === "null") {
          r0 = "null";
          pos += 4;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"null\"");
          }
        }
        return r0;
      }
      
      function parse_Comment() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        if (input.charCodeAt(pos) === 35) {
          r2 = "#";
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (r2 !== null) {
          r3 = [];
          r5 = pos;
          reportFailures++;
          r4 = parse_Eol();
          reportFailures--;
          if (r4 === null) {
            r4 = "";
          } else {
            r4 = null;
            pos = r5;
          }
          while (r4 !== null) {
            r3.push(r4);
            r5 = pos;
            reportFailures++;
            r4 = parse_Eol();
            reportFailures--;
            if (r4 === null) {
              r4 = "";
            } else {
              r4 = null;
              pos = r5;
            }
          }
          if (r3 !== null) {
            r4 = parse_Eol();
            if (r4 !== null) {
              r0 = [r2, r3, r4];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_Digit() {
        var r0;
        
        if (/^[0-9]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        return r0;
      }
      
      function parse_EscapedChar() {
        var r0;
        
        if (input.charCodeAt(pos) === 48) {
          r0 = "0";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"0\"");
          }
        }
        if (r0 === null) {
          if (input.charCodeAt(pos) === 98) {
            r0 = "b";
            pos++;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"b\"");
            }
          }
          if (r0 === null) {
            if (input.charCodeAt(pos) === 116) {
              r0 = "t";
              pos++;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"t\"");
              }
            }
            if (r0 === null) {
              if (input.charCodeAt(pos) === 110) {
                r0 = "n";
                pos++;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"n\"");
                }
              }
              if (r0 === null) {
                if (input.charCodeAt(pos) === 102) {
                  r0 = "f";
                  pos++;
                } else {
                  r0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"f\"");
                  }
                }
                if (r0 === null) {
                  if (input.charCodeAt(pos) === 114) {
                    r0 = "r";
                    pos++;
                  } else {
                    r0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"r\"");
                    }
                  }
                  if (r0 === null) {
                    if (input.charCodeAt(pos) === 34) {
                      r0 = "\"";
                      pos++;
                    } else {
                      r0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"\\\"\"");
                      }
                    }
                    if (r0 === null) {
                      if (input.charCodeAt(pos) === 39) {
                        r0 = "'";
                        pos++;
                      } else {
                        r0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"'\"");
                        }
                      }
                      if (r0 === null) {
                        if (input.charCodeAt(pos) === 92) {
                          r0 = "\\";
                          pos++;
                        } else {
                          r0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\\\\"");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_Ws() {
        var r0;
        
        if (/^[' 's\t\r\n]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[' 's\\t\\r\\n]");
          }
        }
        return r0;
      }
      
      function parse_Eol() {
        var r0;
        
        if (/^[\n\r]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n\\r]");
          }
        }
        return r0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        reportedPos = Math.max(pos, rightmostFailuresPos);
        var found = reportedPos < input.length ? input.charAt(reportedPos) : null;
        var reportedPosDetails = computeReportedPosDetails();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          reportedPos,
          reportedPosDetails.line,
          reportedPosDetails.column
        );
      }
      
      return result;
    }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  subclass(result.SyntaxError, Error);
  
  return result;
})();
